{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled13.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyM1VCN2WuKze2F2wl5Qx9OR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/anushkarastogi/FirstProject/blob/main/ML-Workshop2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "5jB3zeEyeHll"
      },
      "outputs": [],
      "source": [
        "from keras.models import Sequential \n",
        "from keras.layers import Dense\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=np.array([[0,0],[0,1],[1,0],[1,1]])\n",
        "y=np.array([[0],[1],[1],[0]])"
      ],
      "metadata": {
        "id": "5YyNIg-Ce0Wb"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Sequential()\n",
        "model.add(Dense(2,input_dim=2,activation='relu'))\n",
        "model.add(Dense(1,activation='sigmoid'))"
      ],
      "metadata": {
        "id": "IL9n_-kIg7Rg"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "atLXhK5tgaSh",
        "outputId": "515cc6f4-3504-4c1d-d487-908bc9ee9056"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_4\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_10 (Dense)            (None, 2)                 6         \n",
            "                                                                 \n",
            " dense_11 (Dense)            (None, 1)                 3         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 9\n",
            "Trainable params: 9\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.add=(Dense(1,activation='sigmoid'))"
      ],
      "metadata": {
        "id": "0mM2baI0hQ8I"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss='binary_crossentropy', optimizer='rmsprop',metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "wSVl_XhUjJWY"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "h=model.fit(x,y,epochs=50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ftwi2li1hwIl",
        "outputId": "be84e49a-f661-4e93-b155-3f9bfaed44cd"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "1/1 [==============================] - 0s 20ms/step - loss: 0.6980 - accuracy: 0.7500\n",
            "Epoch 2/50\n",
            "1/1 [==============================] - 0s 22ms/step - loss: 0.6979 - accuracy: 0.7500\n",
            "Epoch 3/50\n",
            "1/1 [==============================] - 0s 22ms/step - loss: 0.6978 - accuracy: 0.7500\n",
            "Epoch 4/50\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.6977 - accuracy: 0.7500\n",
            "Epoch 5/50\n",
            "1/1 [==============================] - 0s 13ms/step - loss: 0.6976 - accuracy: 0.7500\n",
            "Epoch 6/50\n",
            "1/1 [==============================] - 0s 12ms/step - loss: 0.6976 - accuracy: 0.7500\n",
            "Epoch 7/50\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.6975 - accuracy: 0.7500\n",
            "Epoch 8/50\n",
            "1/1 [==============================] - 0s 13ms/step - loss: 0.6974 - accuracy: 0.7500\n",
            "Epoch 9/50\n",
            "1/1 [==============================] - 0s 12ms/step - loss: 0.6973 - accuracy: 0.7500\n",
            "Epoch 10/50\n",
            "1/1 [==============================] - 0s 20ms/step - loss: 0.6972 - accuracy: 0.7500\n",
            "Epoch 11/50\n",
            "1/1 [==============================] - 0s 12ms/step - loss: 0.6971 - accuracy: 0.7500\n",
            "Epoch 12/50\n",
            "1/1 [==============================] - 0s 14ms/step - loss: 0.6971 - accuracy: 0.7500\n",
            "Epoch 13/50\n",
            "1/1 [==============================] - 0s 13ms/step - loss: 0.6970 - accuracy: 0.7500\n",
            "Epoch 14/50\n",
            "1/1 [==============================] - 0s 13ms/step - loss: 0.6969 - accuracy: 0.7500\n",
            "Epoch 15/50\n",
            "1/1 [==============================] - 0s 13ms/step - loss: 0.6968 - accuracy: 0.7500\n",
            "Epoch 16/50\n",
            "1/1 [==============================] - 0s 13ms/step - loss: 0.6968 - accuracy: 0.7500\n",
            "Epoch 17/50\n",
            "1/1 [==============================] - 0s 12ms/step - loss: 0.6967 - accuracy: 0.7500\n",
            "Epoch 18/50\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.6966 - accuracy: 0.7500\n",
            "Epoch 19/50\n",
            "1/1 [==============================] - 0s 14ms/step - loss: 0.6966 - accuracy: 0.7500\n",
            "Epoch 20/50\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.6965 - accuracy: 0.7500\n",
            "Epoch 21/50\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.6965 - accuracy: 0.7500\n",
            "Epoch 22/50\n",
            "1/1 [==============================] - 0s 24ms/step - loss: 0.6964 - accuracy: 0.7500\n",
            "Epoch 23/50\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.6963 - accuracy: 0.7500\n",
            "Epoch 24/50\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.6963 - accuracy: 0.7500\n",
            "Epoch 25/50\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.6962 - accuracy: 0.7500\n",
            "Epoch 26/50\n",
            "1/1 [==============================] - 0s 13ms/step - loss: 0.6961 - accuracy: 0.7500\n",
            "Epoch 27/50\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.6961 - accuracy: 0.7500\n",
            "Epoch 28/50\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.6960 - accuracy: 0.7500\n",
            "Epoch 29/50\n",
            "1/1 [==============================] - 0s 13ms/step - loss: 0.6960 - accuracy: 0.7500\n",
            "Epoch 30/50\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.6959 - accuracy: 0.7500\n",
            "Epoch 31/50\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.6958 - accuracy: 0.7500\n",
            "Epoch 32/50\n",
            "1/1 [==============================] - 0s 14ms/step - loss: 0.6958 - accuracy: 0.7500\n",
            "Epoch 33/50\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.6957 - accuracy: 0.7500\n",
            "Epoch 34/50\n",
            "1/1 [==============================] - 0s 22ms/step - loss: 0.6957 - accuracy: 0.7500\n",
            "Epoch 35/50\n",
            "1/1 [==============================] - 0s 23ms/step - loss: 0.6956 - accuracy: 0.7500\n",
            "Epoch 36/50\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.6956 - accuracy: 0.7500\n",
            "Epoch 37/50\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.6955 - accuracy: 0.7500\n",
            "Epoch 38/50\n",
            "1/1 [==============================] - 0s 13ms/step - loss: 0.6955 - accuracy: 0.7500\n",
            "Epoch 39/50\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.6954 - accuracy: 0.7500\n",
            "Epoch 40/50\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.6954 - accuracy: 0.7500\n",
            "Epoch 41/50\n",
            "1/1 [==============================] - 0s 21ms/step - loss: 0.6953 - accuracy: 0.7500\n",
            "Epoch 42/50\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.6953 - accuracy: 0.7500\n",
            "Epoch 43/50\n",
            "1/1 [==============================] - 0s 23ms/step - loss: 0.6952 - accuracy: 0.7500\n",
            "Epoch 44/50\n",
            "1/1 [==============================] - 0s 23ms/step - loss: 0.6952 - accuracy: 0.7500\n",
            "Epoch 45/50\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.6952 - accuracy: 0.7500\n",
            "Epoch 46/50\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.6951 - accuracy: 0.7500\n",
            "Epoch 47/50\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.6951 - accuracy: 0.7500\n",
            "Epoch 48/50\n",
            "1/1 [==============================] - 0s 23ms/step - loss: 0.6950 - accuracy: 0.7500\n",
            "Epoch 49/50\n",
            "1/1 [==============================] - 0s 22ms/step - loss: 0.6950 - accuracy: 0.7500\n",
            "Epoch 50/50\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.6950 - accuracy: 0.7500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "u0gpUWMek5r7"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ac= h.history['accuracy']"
      ],
      "metadata": {
        "id": "Gsy2A-FClVfk"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lo=h.history['loss']\n"
      ],
      "metadata": {
        "id": "qYGsSfV8lZ6O"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(ac,'r-')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "axEy57eKl67j",
        "outputId": "356a8fe2-94e2-476e-b513-3376aff447cf"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fd9c1f9e990>]"
            ]
          },
          "metadata": {},
          "execution_count": 46
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(lo,'b-')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "2Li0BTqGo7fO",
        "outputId": "d79f366e-019a-4cb5-ae05-f51f97a0ff41"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fd9c1f54510>]"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "MP4RS6ckpNGw"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}